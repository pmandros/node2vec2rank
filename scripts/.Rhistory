discrete_expression[expression > quantile_low & expression < quantile_high] <- 0
discrete_expression[expression >= quantile_high] <- 1
return(discrete_expression)
}
# discrete_expression <- do.call(mapply, c(FUN =discretize_three_bins, exp_t_small, quants))
# discrete_expression_df <- data.frame(discrete_expression)
discrete_expression <- sapply(numbers, function(x) discretize_three_bins(luad_defl_no_sex[,x], quants_no_y_def_df[,x]))
discrete_expression_df <- data.frame(discrete_expression,factor())
discrete_expression_df <- data.frame(discrete_expression)
discretize_three_bins <- function(expression, quantiles){
quantile_low <- quantiles[1]
quantile_high <- quantiles[2]
discrete_expression <- c()
discrete_expression[expression <= quantile_low] <- "-1"
discrete_expression[expression > quantile_low & expression < quantile_high] <- "0"
discrete_expression[expression >= quantile_high] <- "1"
return(discrete_expression)
}
# discrete_expression <- do.call(mapply, c(FUN =discretize_three_bins, exp_t_small, quants))
# discrete_expression_df <- data.frame(discrete_expression)
discrete_expression <- sapply(numbers, function(x) discretize_three_bins(luad_defl_no_sex[,x], quants_no_y_def_df[,x]))
discrete_expression_df <- data.frame(discrete_expression, stringsAsFactors = TRUE)
colnames(discrete_expression_df) <- colnames(exp_t)
discretize_three_bins <- function(expression, quantiles){
quantile_low <- quantiles[1]
quantile_high <- quantiles[2]
discrete_expression <- c()
discrete_expression[expression <= quantile_low] <- "-1"
discrete_expression[expression > quantile_low & expression < quantile_high] <- "0"
discrete_expression[expression >= quantile_high] <- "1"
return(discrete_expression)
}
discretize_data <-function(expression, quantiles=c(0.1, 0.9)){
quantiles <- apply(expression, MARGIN=2, function(x) quantile(x,  probs = quantiles))
quantiles_df <-data.frame(quantiles)
numbers <- 1:length(quantiles_df)
discrete_expression <- sapply(numbers, function(x) discretize_three_bins(expression[,x], quantiles_df[,x]))
discrete_expression_df <- data.frame(discrete_expression, stringsAsFactors = TRUE)
colnames(discrete_expression_df) <- colnames(expression)
return(discrete_expression_df)
}
discrete_exp_no_y_deflated_df <- discretize_data(luad_defl_no_sex)
gc()
library(readr)
luad_protCod_notY_deflated_sex <- read_csv("luad_protCod_notY_deflated_sex.csv")
View(luad_protCod_notY_deflated_sex)
library(readr)
luad_protCod_notY_sex <- read_csv("luad_protCod_notY_sex.csv")
View(luad_protCod_notY_sex)
data <- luad_protCod_notY_sex
data_deflated <- luad_protCod_notY_deflated_sex
rm(luad_protCod_notY_deflated_sex,luad_protCod_notY_sex)
sex <- data$sex
data$sex <-NULL
data_deflated$sex <-NULL
quantiles <- c(0.1,0.9)
data_discrete <-discretize_data(data)
discretize_three_bins <- function(expression, quantiles){
quantile_low <- quantiles[1]
quantile_high <- quantiles[2]
discrete_expression <- c()
discrete_expression[expression <= quantile_low] <- "-1"
discrete_expression[expression > quantile_low & expression < quantile_high] <- "0"
discrete_expression[expression >= quantile_high] <- "1"
return(discrete_expression)
}
discretize_data <-function(expression, quantiles=c(0.1, 0.9)){
quantiles <- apply(expression, MARGIN=2, function(x) quantile(x,  probs = quantiles))
quantiles_df <-data.frame(quantiles)
numbers <- 1:length(quantiles_df)
discrete_expression <- sapply(numbers, function(x) discretize_three_bins(expression[,x], quantiles_df[,x]))
discrete_expression_df <- data.frame(discrete_expression, stringsAsFactors = TRUE)
colnames(discrete_expression_df) <- colnames(expression)
return(discrete_expression_df)
}
data_discrete <-discretize_data(data, quantiles = quantiles)
View(data)
data_deflated_discrete <-discretize_data(data_deflated, quantiles = quantiles)
data_discrete$sex <- sex
data_deflated_discrete$sex <- sex
write.csv(data_discrete,"luad_onlyProtCod_notY_withSex_discrete3bins.csv")
write.csv(data_deflated_discrete,"luad_onlyProtCod_notY_withSex_deflated_discrete3bins.csv")
library(mRMRe)
library(dplyr)
set.thread.count(7)
data <- data_deflated_discrete
dd <- mRMR.data(data = data)
install.packages("praznik")
library(praznik)
X <- data
X$sex <-NULL
Y <-data$sex
feat <- MRMR(X,Y,20)
Y <-as.factor(data$sex)
feat <- MRMR(X,Y,20)
feat$selection
mrmr <- MRMR(X,Y,20)
features <- mrmr$selection
features
features <- names(mrmr$selection)
features
view(features)
View(features)
features
View(feat)
mrmr <- MRMR(X,Y,100)
features <- names(mrmr$selection)
View(features)
features
writeClipboard(features)
clipr::write_clip(features)
mrmr$score
library("caret")
library("randomForest")
control <- rfeControl(functions = rfFuncs, # random forest
method = "repeatedcv", # repeated cv
repeats = 5, # number of repeats
number = 10) # number of folds
result_rfe1 <- rfe(x = X,
y = Y,
sizes = c(1:13),
rfeControl = control)
control <- rfeControl(functions = rfFuncs, # random forest
method = "repeatedcv", # repeated cv
repeats = 1, # number of repeats
number = 1) # number of folds
result_rfe1 <- rfe(x = X,
y = Y,
sizes = c(1:20),
rfeControl = control)
control <- rfeControl(functions = rfFuncs, # random forest
method = "repeatedcv", # repeated cv
repeats = 1, # number of repeats
number = 5) # number of folds
result_rfe1 <- rfe(x = X,
y = Y,
sizes = c(1:20),
rfeControl = control)
install.packages("GSelection")
library("GSelection")
another <- feature.selection(X,Y,20)
library(readr)
luad_protCod_notY_deflated_sex <- read_csv("luad_protCod_notY_deflated_sex.csv")
View(luad_protCod_notY_deflated_sex)
cata_cont <- luad_protCod_notY_deflated_sex
data_cont <- luad_protCod_notY_deflated_sex
X_cont$sex <-NULL
X_cont <- data_cont
X_cont$sex <-NULL
another <- feature.selection(X_cont,Y,20)
another <- feature.selection(X_cont,as.numeric(Y),20)
library(Boruta)
install.packages("Boruta")
library(Boruta)
boruta_output <- Boruta(sex ~ ., data=na.omit(data_cont), doTrace=0)
rPartMod <- train(sex ~ ., data=data_cont, method="rpart")
options("expressions"=20000)
memory.limit(size=8000000)
boruta_output <- Boruta(sex ~ ., data=na.omit(data_cont), doTrace=0)
options(expressions = 5e5)
rPartMod <- train(sex ~ ., data=data_cont, method="rpart")
help(rfeControl)
control <- rfeControl(functions = rfFuncs, # random forest
method = "boot")
result_rfe1 <- rfe(x = X,
y = Y,
sizes = c(1:10),
rfeControl = control)
result_rfe1$results
result_rfe1$control
result_rfe1$confusion
result_rfe1$fit$confusion
memory.limit(size=16000000)
library(glmnet)
cv.lasso <- cv.glmnet(X_cont, Y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
cv.lasso <- cv.glmnet(as.matrix(X_cont), Y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
cv.lasso <- cv.glmnet(data.matrix(X_cont), Y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
plot(cv.lasso)
cat('Min Lambda: ', cv.lasso$lambda.min, '\n 1Sd Lambda: ', cv.lasso$lambda.1se)
df_coef <- round(as.matrix(coef(cv.lasso, s=cv.lasso$lambda.min)), 2)
# See all contributing variables
df_coef[df_coef[, 1] != 0, ]
df_coef[df_coef[, 1] != 0, ]
as.matrix(coef(cv.lasso, cv.lasso$lambda.min))
plot(cv.lasso, xvar="lambda")
plot(cv.lasso, xvar="lambda")
plot(cv.lasso, xvar="lambda")
cv.lasso$lambda.min
as.matrix(coef(cv.lasso, cv.lasso$lambda.min))
require(doMC)
registerDoMC(cores = 4)
install.packages(doMC)
install.packages("doMC")
require(doMC)
registerDoMC(cores = 4)
cv.lasso <- cv.glmnet(data.matrix(X_cont), Y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='default')
plot(cv.lasso)
as.matrix(coef(cv.lasso, cv.lasso$lambda.min))
predict(cv.lasso,type="coef")
plot(cv.lasso, xvar='lambda')
lasso<-glmnet(X,Y ,
intercept=TRUE, alpha=1, lambda = cv.lasso$lambda.min)
lasso<-glmnet(data.matrix(X_cont),Y ,
intercept=TRUE, alpha=1, lambda = cv.lasso$lambda.min)
lasso<-glmnet(data.matrix(X_cont),Y , family='binomial',
intercept=TRUE, alpha=1, lambda = cv.lasso$lambda.min)
as.matrix(coef(lasso))
install.packages("DALEX")
library(DALEX)
rfor <- randomForest(sex ~ ., data=data_cont, ntree=100)
rfor <- randomForest(sex ~ ., data=data_cont, ntree=10)
gc()
library(readr)
luad_protCod_notY_deflated_sex <- read_csv("luad_protCod_notY_deflated_sex.csv")
View(luad_protCod_notY_deflated_sex)
data_cont <- luad_protCod_notY_deflated_sex
X_cont <- data_cont
X_cont$sex <-NULL
Y <-as.factor(data_cont$sex)
rfor <- randomForest(sex ~ ., data=data_cont, ntree=10)
gc()
rm(luad_protCod_notY_deflated_sex, X_cont)
gc()
rfor <- randomForest(sex ~ ., data=data_cont, ntree=1)
library(RTCGAToolbox)
# Download GISTIC results
lastAnalyseDate <- getFirehoseAnalyzeDates(5)
gistic <- getFirehoseData("LUAD", GISTIC = T, gistic2_Date = lastAnalyseDate)
gc()
setwd("~/git/tcga_data_manipulations")
library(praznik)
library(dplyr)
library("caret")
library("randomForest")
library("GSelection")
library(Boruta)
library(DALEX)
set.thread.count(7)
data <- read_csv("luad_onlyProtCod_notY_withSex_deflated_discrete3bins.csv")
gc()
data <- read_csv("luad_protCod_notY_sex.csv")
data_deflated <- read_csv("luad_protCod_notY_deflated_sex.csv")
sex <- data$sex
data$sex <-NULL
data_deflated$sex <-NULL
discretize_three_bins <- function(expression, quantiles){
quantile_low <- quantiles[1]
quantile_high <- quantiles[2]
discrete_expression <- c()
discrete_expression[expression <= quantile_low] <- "-1"
discrete_expression[expression > quantile_low & expression < quantile_high] <- "0"
discrete_expression[expression >= quantile_high] <- "1"
return(discrete_expression)
}
discretize_data <-function(expression, quantiles=c(0.1, 0.9)){
quantiles <- apply(expression, MARGIN=2, function(x) quantile(x,  probs = quantiles))
quantiles_df <-data.frame(quantiles)
numbers <- 1:length(quantiles_df)
discrete_expression <- sapply(numbers, function(x) discretize_three_bins(expression[,x], quantiles_df[,x]))
discrete_expression_df <- data.frame(discrete_expression, stringsAsFactors = TRUE)
colnames(discrete_expression_df) <- colnames(expression)
return(discrete_expression_df)
}
quantiles <- c(0.1,0.9)
data_discrete <-discretize_data(data, quantiles = quantiles)
data_deflated_discrete <-discretize_data(data_deflated, quantiles = quantiles)
write.csv(data_discrete,"luad_onlyProtCod_notY_withSex_discrete3bins.csv", row.names = FALSE)
write.csv(data_deflated_discrete,"luad_onlyProtCod_notY_withSex_deflated_discrete3bins.csv", row.names = FALSE)
View(data_discrete)
discretize_data <-function(expression, quantiles=c(0.1, 0.9)){
quantiles <- apply(expression, MARGIN=2, function(x) quantile(x,  probs = quantiles))
quantiles_df <-data.frame(quantiles)
numbers <- 1:length(quantiles_df)
discrete_expression <- sapply(numbers, function(x) discretize_three_bins(expression[,x], quantiles_df[,x]))
discrete_expression_df <- data.frame(discrete_expression)
colnames(discrete_expression_df) <- colnames(expression)
return(discrete_expression_df)
}
data_discrete <-discretize_data(data, quantiles = quantiles)
data_deflated_discrete <-discretize_data(data_deflated, quantiles = quantiles)
data_discrete$sex <- sex
data_deflated_discrete$sex <- sex
write.csv(data_discrete,"luad_onlyProtCod_notY_withSex_discrete3bins.csv", row.names = FALSE)
write.csv(data_deflated_discrete,"luad_onlyProtCod_notY_withSex_deflated_discrete3bins.csv", row.names = FALSE)
discretize_three_bins <- function(expression, quantiles){
quantile_low <- quantiles[1]
quantile_high <- quantiles[2]
discrete_expression <- c()
discrete_expression[expression <= quantile_low] <- -1
discrete_expression[expression > quantile_low & expression < quantile_high] <- 0
discrete_expression[expression >= quantile_high] <- 1
return(discrete_expression)
}
discretize_data <-function(expression, quantiles=c(0.1, 0.9)){
quantiles <- apply(expression, MARGIN=2, function(x) quantile(x,  probs = quantiles))
quantiles_df <-data.frame(quantiles)
numbers <- 1:length(quantiles_df)
discrete_expression <- sapply(numbers, function(x) discretize_three_bins(expression[,x], quantiles_df[,x]))
discrete_expression_df <- data.frame(discrete_expression)
colnames(discrete_expression_df) <- colnames(expression)
return(discrete_expression_df)
}
quantiles <- c(0.1,0.9)
data_discrete <-discretize_data(data, quantiles = quantiles)
data_deflated_discrete <-discretize_data(data_deflated, quantiles = quantiles)
data_discrete$sex <- sex
data_deflated_discrete$sex <- sex
write.csv(data_discrete,"luad_onlyProtCod_notY_withSex_discrete3bins.csv", row.names = FALSE)
write.csv(data_deflated_discrete,"luad_onlyProtCod_notY_withSex_deflated_discrete3bins.csv", row.names = FALSE)
library(data.table)
fwrite(data_discrete,"luad_onlyProtCod_notY_withSex_discrete3bins.csv")
fwrite(data_deflated_discrete,"luad_onlyProtCod_notY_withSex_deflated_discrete3bins.csv")
gc()
library(praznik)
library(dplyr)
library("caret")
library("randomForest")
library("GSelection")
library(Boruta)
library(DALEX)
set.thread.count(7)
data <- read_csv("luad_onlyProtCod_notY_withSex_deflated_discrete3bins.csv")
library(data.table)
data <- fread("luad_onlyProtCod_notY_withSex_deflated_discrete3bins.csv")
data <- fread("luad_onlyProtCod_notY_withSex_deflated_discrete3bins.csv")
data_cont <- fread("luad_onlyProtCod_notY_withSex_deflated.csv")
data_cont <- fread("luad_protCod_notY_deflated_sex.csv")
X_cont <- data_cont
X_cont$sex <-NULL
Y <-as.factor(data_cont$sex)
X <- data
X$sex <-NULL
Y <-as.factor(data$sex)
mrmr <- MRMR(X,Y,20)
features <- names(mrmr$selection)
View(features)
clipr::write_clip(features)
mrmr_features <- names(mrmr$selection)
mrmr <- MRMR(X_cont,Y,20)
mrmr_features <- names(mrmr$selection)
mrmr_features <- names(mrmr$selection)
mrmr_features
mrmr$score
mrmr_features <- names(mrmr$selection)
clipr::write_clip(mrmr_features)
exp_selected <- data_cont[,mrmr_features]
mrmr_features
mrmr_features
mrmr_features
mrmr_features
exp_selected <- data_cont[,mrmr_features]
type(data_cont)
class(data_cont)
exp_selected <- data_cont[mrmr_features]
exp_selected <- data_cont[, c=(mrmr_features)]
exp_selected <- data_cont[, c(mrmr_features)]
exp_selected
exp_selected <- data_cont[ c(mrmr_features)]
data_cont
head(data_cont)
colnames(data_cont)
data_cont["ENSG00000067221"]
data <- data.frame(fread("luad_onlyProtCod_notY_withSex_deflated_discrete3bins.csv"))
data_cont <- data.frame(fread("luad_protCod_notY_deflated_sex.csv"))
exp_selected <- data_cont[, mrmr_features]
mean_exp_vector <- colMeans(exp_selected)
aggregate(exp_selected, sex, FUN=mean)
aggregate(exp_selected, list(sex), FUN=mean)
aggregate(exp_selected, list(Y), FUN=mean)
mean_exp_vector <- aggregate(exp_selected, list(Y), FUN=mean)
View(mean_exp_vector)
mrmr <- MRMR(X,Y,20)
mrmr_features <- names(mrmr$selection)
clipr::write_clip(mrmr_features)
exp_selected <- data_cont[, mrmr_features]
mean_exp_vector <- aggregate(exp_selected, list(Y), FUN=mean)
mean_exp_vector
View(mean_exp_vector)
mrmr <- MRMR(X,Y,20)
mrmr_features <- names(mrmr$selection)
clipr::write_clip(mrmr_features)
exp_selected <- data_cont[, mrmr_features]
mean_exp_vector <- aggregate(exp_selected, list(Y), FUN=mean)
View(mean_exp_vector)
mrmr <- MRMR(X_cont,Y,20)
mrmr_features <- names(mrmr$selection)
clipr::write_clip(mrmr_features)
exp_selected <- data_cont[, mrmr_features]
mean_exp_vector <- aggregate(exp_selected, list(Y), FUN=mean)
View(mrmr)
View(mean_exp_vector)
clipr::write_clip(mrmr_features)
data <- data.frame(fread("luad_onlyProtCod_notY_withSex_discrete3bins.csv"))
X_cont <- data_cont
X_cont$sex <-NULL
Y <-as.factor(data_cont$sex)
X <- data
X$sex <-NULL
mrmr <- MRMR(X_cont,Y,20)
mrmr_features <- names(mrmr$selection)
clipr::write_clip(mrmr_features)
exp_selected <- data_cont[, mrmr_features]
mean_exp_vector <- aggregate(exp_selected, list(Y), FUN=mean)
data_cont <- data.frame(fread("luad_protCod_notY_ex.csv"))
data_cont <- data.frame(fread("luad_protCod_notY_sex.csv"))
X_cont <- data_cont
X_cont$sex <-NULL
Y <-as.factor(data_cont$sex)
X <- data
X$sex <-NULL
mrmr <- MRMR(X_cont,Y,20)
mrmr_features <- names(mrmr$selection)
clipr::write_clip(mrmr_features)
exp_selected <- data_cont[, mrmr_features]
mean_exp_vector <- aggregate(exp_selected, list(Y), FUN=mean)
mrmr <- MRMR(X_cont,Y,100)
mrmr_features <- names(mrmr$selection)
clipr::write_clip(mrmr_features)
exp_selected <- data_cont[, mrmr_features]
mean_exp_vector <- aggregate(exp_selected, list(Y), FUN=mean)
clipr::write_clip(mrmr_features)
gc()
setwd("~/git/bio_graph_embed/scripts")
cosmic <- fread("Census_allSun Nov 13 20_44_37 2022.csv")
cancers <- unique(cosmic$`Tumour Types(Somatic)`)
cancers <- unique(cosmic$Tumour Types(Somatic))
cancers <- unique(cosmic$`Tumour Types(Somatic)`)
cancers
colon_cosmic <- cosmic[grepl('colo', cosmic)]
cosmic <- data.frame(fread("Census_allSun Nov 13 20_44_37 2022.csv"))
colon_cosmic <- cosmic[grepl('colo', cosmic)]
colon_cosmic <- cosmic[grepl('colo', cosmic$Tumour.Types.Somatic.)]
colon_cosmic <- cosmic[grepl('colo', cosmic$Tumour.Types.Somatic.)]
colon_cosmic <- cosmic[grepl('colo', cosmic$Tumour.Types.Somatic.),]
gene_mapping <- data.frame(fread("gen_v26_mapping.csv"))
gene_map_cosmic <- filter(gene_mapping, gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol)
library(dplyr)
gene_map_cosmic <- filter(gene_mapping, gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol)
gene_map_cosmic <- filter(gene_mapping, gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol)
gene_map_cosmic <- filter_at(gene_mapping, gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol)
gene_map_cosmic <- filter(gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol)
gene_map_cosmic <- filter(gene_mapping, gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol)
gene_map_cosmic <- gene_mapping %>% filter(gene_name %in% colon_cosmic$Gene.Symbol)
gene_mapping %>% filter(gene_name %in% colon_cosmic$Gene.Symbol)
library(dplyr)
gene_map_cosmic <- gene_mapping %>% filter(gene_name %in% colon_cosmic$Gene.Symbol)
gene_map_cosmic <-  filter(gene_mapping, gene_name %in% colon_cosmic$Gene.Symbol)
gene_map_cosmic <-  filter(gene_mapping, gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol)
gene_mapping <- as.tibble(fread("gen_v26_mapping.csv"))
gene_map_cosmic <-  filter(gene_mapping, gene_name %in% colon_cosmic$Gene.Symbol)
gene_map_cosmic <- gene_mapping %>%  filter(gene_name %in% colon_cosmic$Gene.Symbol)
gene_mapping <- fata.frame(fread("gen_v26_mapping.csv"))
gene_mapping <- data.frame(fread("gen_v26_mapping.csv"))
gene_map_cosmic <- gene_mapping %>%  filter(gene_name %in% colon_cosmic$Gene.Symbol)
gene_map_cosmic <- filter(gene_mapping, gene_name %in% colon_cosmic$Gene.Symbol)
cosmic <- data.frame(fread("Census_allSun Nov 13 20_44_37 2022.csv"))
colon_cosmic <- cosmic[grepl('colo', cosmic$Tumour.Types.Somatic.),]
gene_mapping <- data.frame(fread("gen_v26_mapping.csv"))
gene_map_cosmic <- filter(gene_mapping, gene_name %in% colon_cosmic$Gene.Symbol)
gene_map_cosmic <- gene_mapping[gene_name %in% colon_cosmic$Gene.Symbol,]
gene_map_cosmic <- gene_mapping[gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol,]
gene_id_map_cosmic <- gene_mapping[gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol,]$gene_id
gene_id_map_cosmic = substr(gene_id_map_cosmic,1,14)
gene_id_map_cosmic = substr(gene_id_map_cosmic,1,15)
gene_id_map_cosmic <- gene_mapping[gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol,]$gene_id
gene_id_map_cosmic = substr(gene_id_map_cosmic,1,15)
gene_id_map_cosmic <- gene_mapping[gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol,]$gene_id
gene_id_map_cosmic = substr(gene_id_map_cosmic,1,16)
gene_id_map_cosmic <- gene_mapping[gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol,]$gene_id
gene_id_map_cosmic = substr(gene_id_map_cosmic,1,15)
fwrite(gene_id_map_cosmic, "colon_cancer_drivers.csv")
fwrite(c(gene_id_map_cosmic), "colon_cancer_drivers.csv")
fwrite(gene_id_map_cosmic, "colon_cancer_drivers.csv")
fwrite(data.frame(gene_id_map_cosmic), "colon_cancer_drivers.csv")
write.table(data.frame(gene_id_map_cosmic), "colon_cancer_drivers.csv", col.names=FALSE)
write.table(data.frame(gene_id_map_cosmic), "colon_cancer_drivers.csv", col.names=FALSE, row.names = F)
write.table(data.frame(gene_id_map_cosmic), "colon_cancer_drivers.csv",
col.names=FALSE, row.names = F, quote = FALSE)
gene_id_map_cosmic <- gene_mapping[gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol,]$gene_name
gene_id_map_cosmic = substr(gene_id_map_cosmic,1,15)
write.table(data.frame(gene_id_map_cosmic), "colon_cancer_drivers_name.csv",
col.names=FALSE, row.names = F, quote = FALSE)
setwd("~/git/bio_graph_embed/expression")
data <- data.frame(fread('xprs_panc_gtex_snail.tsv'))
data_two <-  data.frame(fread('xprs_panc_tcga_snail.tsv'))
library(dplyr)
cosmic <- data.frame(fread("Census_allSun Nov 13 20_44_37 2022.csv"))
colon_cosmic <- cosmic[grepl('pancreas', cosmic$Tumour.Types.Somatic.),]
setwd("~/git/bio_graph_embed/scripts")
library(dplyr)
cosmic <- data.frame(fread("Census_allSun Nov 13 20_44_37 2022.csv"))
colon_cosmic <- cosmic[grepl('pancreas', cosmic$Tumour.Types.Somatic.),]
colon_cosmic <- cosmic[grepl('panc', cosmic$Tumour.Types.Somatic.),]
cosmic <- data.frame(fread("Census_allSun Nov 13 20_44_37 2022.csv"))
colon_cosmic <- cosmic[grepl('panc', cosmic$Tumour.Types.Somatic.),]
gene_mapping <- data.frame(fread("gen_v26_mapping.csv"))
gene_id_map_cosmic <- gene_mapping[gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol,]$gene_name
gene_id_map_cosmic = substr(gene_id_map_cosmic,1,15)
write.table(data.frame(gene_id_map_cosmic), "panc_cancer_drivers_name.csv",
col.names=FALSE, row.names = F, quote = FALSE)
gene_id_map_cosmic <- gene_mapping[gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol,]$gene_id
gene_id_map_cosmic = substr(gene_id_map_cosmic,1,15)
write.table(data.frame(gene_id_map_cosmic), "panc_cancer_drivers_id.csv",
col.names=FALSE, row.names = F, quote = FALSE)
cosmic <- data.frame(fread("Census_allSun Nov 13 20_44_37 2022.csv"))
colon_cosmic <- cosmic[grepl('panc', cosmic$Tumour.Types.Somatic.),]
colon_cosmic <- cosmic
gene_mapping <- data.frame(fread("gen_v26_mapping.csv"))
gene_id_map_cosmic <- gene_mapping[gene_mapping$gene_name %in% colon_cosmic$Gene.Symbol,]$gene_id
gene_id_map_cosmic = substr(gene_id_map_cosmic,1,15)
write.table(data.frame(gene_id_map_cosmic), "cancer_drivers_id.csv",
col.names=FALSE, row.names = F, quote = FALSE)
